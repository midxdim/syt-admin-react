{"version":3,"file":"static/js/334.65b5e2b0.chunk.js","mappings":"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","sources":["api/hospital/hospitalList.ts","api/hospital/hospitalSchedule.ts","pages/hospital/hospitalList/index.tsx","../node_modules/antd/es/space/Item.js","../node_modules/antd/es/space/index.js"],"sourcesContent":["import {\n    ProvinceOrCityItem, ReqGetHospitalDetail,\n    ReqGetHospitalListParams,\n    ReqGetHospitalListResponse\n} from \"@api/hospital/model/hospitalListTypes\";\nimport request from \"@utils/http/request\";\n\n/**\n * 获取省份列表\n */\nexport function reqGetProvinceList() {\n    return request.get<any, ProvinceOrCityItem[]>('/admin/cmn/dict/findByDictCode/Province');\n}\n\n/**\n * 获取市区列表\n */\nexport function reqGetCityList(parentId: string|number) {\n    return request.get<any, ProvinceOrCityItem[]>(`/admin/cmn/dict/findByParentId/${parentId}`);\n}\n\n/**\n * 获取医院等级的信息\n */\nexport function reqGetHosTypes(){\n    return request.get<any, ProvinceOrCityItem[]>('/admin/cmn/dict/findByDictCode/Hostype');\n}\n\n/**\n * 获取医院列表\n */\nexport function reqGetHospitalList({page, limit, ...params}: ReqGetHospitalListParams) {\n    return request.get<any, ReqGetHospitalListResponse>(`/admin/hosp/hospital/${page}/${limit}`, {params});\n}\n\nexport function reqGetHospitalDetail(id: string|number){\n    return request.get<any, ReqGetHospitalDetail>(`/admin/hosp/hospital/show/${id}`);\n}\n","import {request} from \"@utils/http\";\nimport {\n    Department,\n    DoctorItem,\n    ReqGetScheduleParams,\n    ReqScheduleResponse\n} from \"@api/hospital/model/hospitalScheduleTypes\";\n\n/**\n * 获取某个医院所有的科室\n */\nexport function reqGetDepartments(hoscode: string){\n    return request.get<any, Department[]>(`/admin/hosp/department/${hoscode}`);\n}\n\n/**\n * 获取排班规则\n */\nexport function reqGetSchedule({page, limit, hoscode, depcode}: ReqGetScheduleParams){\n    return request.get<ReqGetScheduleParams, ReqScheduleResponse>(`/admin/hosp/schedule/getScheduleRule/${page}/${limit}/${hoscode}/${depcode}`);\n}\n\n/**\n * 获取医生列表\n */\nexport function reqGetDoctorList(hoscode: string, depcode: string, workDate: string){\n    return request.get<any, DoctorItem[]>(`/admin/hosp/schedule/findScheduleList/${hoscode}/${depcode}/${workDate}`);\n}\n\n/**\n * 上下线排班\n */\nexport function reqUpdateScheduleStatus(scheduleId: string, status: number){\n    return request.get<any, null>(`/admin/hosp/hospital/updateStatus/${scheduleId}/${status}`);\n}","// import React from \"react\";\n\nimport {Button, Card, Form, Input, Select, Space, Table} from \"antd\";\nimport {SearchOutlined} from \"@ant-design/icons\";\nimport {ColumnsType} from \"antd/lib/table\";\nimport {HospitalListItem, ProvinceOrCityItem} from \"@api/hospital/model/hospitalListTypes\";\nimport React, {useEffect, useState} from \"react\";\nimport {reqGetCityList, reqGetHospitalList, reqGetHosTypes, reqGetProvinceList} from \"@api/hospital/hospitalList\";\nimport {Link} from \"react-router-dom\";\nimport {reqUpdateScheduleStatus} from \"@api/hospital/hospitalSchedule\";\n\nconst {Option} = Select;\n\nexport default function HospitalList() {\n    let columns:ColumnsType<HospitalListItem> = [\n        {\n            title: \"序号\",\n            render: (_, record, index) => {\n                return index + 1;\n            }\n        },\n        {\n            title: \"医院 logo\",\n            dataIndex: \"logoData\",\n            render: (v) => {\n                return <img width={60} src={\"data:image/png;base64,\" + v} alt=\"\" />;\n            }\n        },\n        {\n            title: \"医院名称\",\n            dataIndex: \"hosname\"\n        },\n        {\n            title: \"医院等级\",\n            render: (_, record) => {\n                return record.param.hostypeString;\n            }\n        },\n        {\n            title: \"详细地址\",\n            render: (_, record) => {\n                return record.param.fullAddress;\n            }\n        },\n        {\n            title: \"状态\",\n            dataIndex: \"status\",\n            render: (value) => {\n                return value === 0 ? \"未上线\" : \"已上线\";\n            }\n        },\n        {\n            title: \"创建时间\",\n            dataIndex: \"createTime\"\n        },\n        {\n            title: \"操作\",\n            render: (_, record) => {\n                return <Space>\n                    <Link to={`/syt/hospital/hospitalList/${record.id}`}><Button type=\"primary\">查看</Button></Link>\n                    <Link to={'/syt/hospital/schedule'} state={{hoscode: record.hoscode}}><Button type=\"primary\">排班</Button></Link>\n                    <Button type=\"primary\" onClick={async () => {\n                        await reqUpdateScheduleStatus(record.id, record.status === 0 ? 1 : 0);\n                        setFresh(!fresh);\n                    }}>{record.status? '下线': '上线'}</Button>\n                </Space>;\n            }\n        }\n    ];\n\n    // 状态\n    const [province, setProvince] = useState<ProvinceOrCityItem[]>([]);\n    const [cities, setCities] = useState<ProvinceOrCityItem[]>([]);\n    const [district, setDistrict] = useState<ProvinceOrCityItem[]>([]);\n    const [hosType, setHosType] = useState<ProvinceOrCityItem[]>([]);\n    const [hospital, setHospital] = useState<HospitalListItem[]>([]);\n    const [current,setCurrent] = useState<number>(1);\n    const [pageSize, setPageSize] = useState<number>(5);\n    const [total, setTotal] = useState<number>(0);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [fresh, setFresh] = useState<boolean>(false);\n\n    const [form] = Form.useForm();\n    useEffect(() => {\n        let getProvince = async () => {\n            setProvince(await reqGetProvinceList());\n        };\n        getProvince();\n        let getHostypes = async () => {\n            //发送请求获取所有的省份\n            let hostypes = await reqGetHosTypes();\n            //更新状态\n            setHosType(hostypes);\n        }\n        getHostypes();\n    }, []);\n    useEffect(() => {\n        setLoading(true);\n        let fields = form.getFieldsValue();\n        let getHospital = async () => {\n            try {\n                let result = await reqGetHospitalList({page: current, limit: pageSize, ...fields});\n                setHospital(result.content);\n                setTotal(result.totalElements);\n            }finally{\n                setLoading(false);\n            }\n        };\n        getHospital();\n    }, [current, pageSize, fresh, form]);\n\n    return (\n        <Card>\n            <Form\n                layout={\"inline\"}\n                form={form}\n                onFinish={() => {\n                    setFresh(!fresh);\n                    setCurrent(1);\n                }}\n            >\n                <Form.Item name=\"provinceCode\" style={{width: 200, marginBottom: 20}}>\n                    <Select\n                        placeholder=\"请选择省\"\n                        onChange={async (provinceId: React.Key) => {\n                            setCities([]);\n                            setDistrict([]);\n                            form.setFieldsValue({cityCode: undefined, districtCode: undefined});\n                            setCities(await reqGetCityList(provinceId));\n                        }}\n                    >\n                        {province.map((item) => <Option key={item.id} value={item.value}>{item.name}</Option>)}\n                    </Select>\n                </Form.Item>\n\n                <Form.Item name=\"cityCode\" style={{width: 200}}>\n                    <Select\n                        placeholder=\"请选择市\"\n                        onChange={async (cityId: React.Key) => {\n                            setDistrict([]);\n                            form.setFieldsValue({districtCode: undefined});\n                            setDistrict(await reqGetCityList(cityId));\n                        }}\n                    >\n                        {cities.map((item) => <Option key={item.id} value={item.value}>{item.name}</Option>)}\n                    </Select>\n                </Form.Item>\n\n                <Form.Item name=\"districtCode\" style={{width: 200}}>\n                    <Select\n                        placeholder=\"请选择区\"\n                    >\n                        {district.map((item) => <Option key={item.id} value={item.value}>{item.name}</Option>)}\n                    </Select>\n                </Form.Item>\n                <Form.Item name={\"hosname\"}>\n                    <Input placeholder=\"医院名称\" />\n                </Form.Item>\n                <Form.Item name={\"hoscode\"}>\n                    <Input placeholder=\"医院编号\" />\n                </Form.Item>\n\n                <Form.Item name=\"hostype\" style={{width: 200}}>\n                    <Select\n                        placeholder=\"选择医院类型\"\n                    >\n                        {hosType.map((item) => <Option key={item.id} value={item.value}>{item.name}</Option>)}\n                    </Select>\n                </Form.Item>\n\n                <Form.Item name=\"status\" style={{width: 200}}>\n                    <Select\n                        placeholder=\"医院状态\"\n                    >\n                        <Option value=\"0\">未上线</Option>\n                        <Option value=\"1\">已上线</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item >\n                    <Button type=\"primary\" htmlType=\"submit\" icon={<SearchOutlined />}>查询</Button>\n                </Form.Item>\n                <Form.Item>\n                    <Button htmlType=\"reset\" onClick={() => {\n                        form.resetFields();\n                        setFresh(!fresh);\n                        setCurrent(1);\n                    }}>清空</Button>\n                </Form.Item>\n            </Form>\n            <div className=\"h-20\"></div>\n            <Table bordered rowKey=\"id\" columns={columns} dataSource={hospital} loading={loading}\n                 pagination={{\n                     current, pageSize, total,\n                     showSizeChanger: true,\n                     pageSizeOptions: [\"5\", \"10\", \"15\", \"20\"],\n                     onChange: async (page, pageSize) => {\n                         setLoading(true);\n                         setCurrent(page);\n                         setPageSize(pageSize || 5);\n                         let result = await reqGetHospitalList({page, limit: pageSize || 5});\n                         setHospital(result.content);\n                         setLoading(false);\n                     }\n                 }}\n            />\n        </Card>\n    );\n};","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { SpaceContext } from '.';\nexport default function Item(_ref) {\n  var className = _ref.className,\n      direction = _ref.direction,\n      index = _ref.index,\n      marginDirection = _ref.marginDirection,\n      children = _ref.children,\n      split = _ref.split,\n      wrap = _ref.wrap;\n\n  var _React$useContext = React.useContext(SpaceContext),\n      horizontalSize = _React$useContext.horizontalSize,\n      verticalSize = _React$useContext.verticalSize,\n      latestIndex = _React$useContext.latestIndex,\n      supportFlexGap = _React$useContext.supportFlexGap;\n\n  var style = {};\n\n  if (!supportFlexGap) {\n    if (direction === 'vertical') {\n      if (index < latestIndex) {\n        style = {\n          marginBottom: horizontalSize / (split ? 2 : 1)\n        };\n      }\n    } else {\n      style = _extends(_extends({}, index < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {\n        paddingBottom: verticalSize\n      });\n    }\n  }\n\n  if (children === null || children === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, children), index < latestIndex && split && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(className, \"-split\"),\n    style: style\n  }, split));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { ConfigContext } from '../config-provider';\nimport Item from './Item';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nexport var SpaceContext = /*#__PURE__*/React.createContext({\n  latestIndex: 0,\n  horizontalSize: 0,\n  verticalSize: 0,\n  supportFlexGap: false\n});\nvar spaceSize = {\n  small: 8,\n  middle: 16,\n  large: 24\n};\n\nfunction getNumberSize(size) {\n  return typeof size === 'string' ? spaceSize[size] : size || 0;\n}\n\nvar Space = function Space(props) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      space = _React$useContext.space,\n      directionConfig = _React$useContext.direction;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || 'small' : _props$size,\n      align = props.align,\n      className = props.className,\n      children = props.children,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,\n      customizePrefixCls = props.prefixCls,\n      split = props.split,\n      style = props.style,\n      _props$wrap = props.wrap,\n      wrap = _props$wrap === void 0 ? false : _props$wrap,\n      otherProps = __rest(props, [\"size\", \"align\", \"className\", \"children\", \"direction\", \"prefixCls\", \"split\", \"style\", \"wrap\"]);\n\n  var supportFlexGap = useFlexGapSupport();\n\n  var _React$useMemo = React.useMemo(function () {\n    return (Array.isArray(size) ? size : [size, size]).map(function (item) {\n      return getNumberSize(item);\n    });\n  }, [size]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      horizontalSize = _React$useMemo2[0],\n      verticalSize = _React$useMemo2[1];\n\n  var childNodes = toArray(children, {\n    keepEmpty: true\n  });\n  var mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;\n  var prefixCls = getPrefixCls('space', customizePrefixCls);\n  var cn = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(direction), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), directionConfig === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-align-\").concat(mergedAlign), mergedAlign), _classNames), className);\n  var itemClassName = \"\".concat(prefixCls, \"-item\");\n  var marginDirection = directionConfig === 'rtl' ? 'marginLeft' : 'marginRight'; // Calculate latest one\n\n  var latestIndex = 0;\n  var nodes = childNodes.map(function (child, i) {\n    if (child !== null && child !== undefined) {\n      latestIndex = i;\n    }\n\n    var key = child && child.key || \"\".concat(itemClassName, \"-\").concat(i);\n    return /*#__PURE__*/React.createElement(Item, {\n      className: itemClassName,\n      key: key,\n      direction: direction,\n      index: i,\n      marginDirection: marginDirection,\n      split: split,\n      wrap: wrap\n    }, child);\n  });\n  var spaceContext = React.useMemo(function () {\n    return {\n      horizontalSize: horizontalSize,\n      verticalSize: verticalSize,\n      latestIndex: latestIndex,\n      supportFlexGap: supportFlexGap\n    };\n  }, [horizontalSize, verticalSize, latestIndex, supportFlexGap]); // =========================== Render ===========================\n\n  if (childNodes.length === 0) {\n    return null;\n  }\n\n  var gapStyle = {};\n\n  if (wrap) {\n    gapStyle.flexWrap = 'wrap'; // Patch for gap not support\n\n    if (!supportFlexGap) {\n      gapStyle.marginBottom = -verticalSize;\n    }\n  }\n\n  if (supportFlexGap) {\n    gapStyle.columnGap = horizontalSize;\n    gapStyle.rowGap = verticalSize;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cn,\n    style: _extends(_extends({}, gapStyle), style)\n  }, otherProps), /*#__PURE__*/React.createElement(SpaceContext.Provider, {\n    value: spaceContext\n  }, nodes));\n};\n\nexport default Space;"],"names":["reqGetProvinceList","request","reqGetCityList","parentId","reqGetHosTypes","reqGetHospitalList","page","limit","params","reqGetHospitalDetail","id","reqGetDepartments","hoscode","reqGetSchedule","depcode","reqGetDoctorList","workDate","reqUpdateScheduleStatus","scheduleId","status","Option","Select","HospitalList","columns","title","render","_","record","index","dataIndex","v","width","src","alt","param","hostypeString","fullAddress","value","to","type","state","onClick","setFresh","fresh","useState","province","setProvince","cities","setCities","district","setDistrict","hosType","setHosType","hospital","setHospital","current","setCurrent","pageSize","setPageSize","total","setTotal","loading","setLoading","Form","form","useEffect","getProvince","getHostypes","hostypes","fields","getFieldsValue","getHospital","result","content","totalElements","layout","onFinish","name","style","marginBottom","placeholder","onChange","provinceId","setFieldsValue","cityCode","undefined","districtCode","map","item","cityId","htmlType","icon","resetFields","className","bordered","rowKey","dataSource","pagination","showSizeChanger","pageSizeOptions","Item","_ref","direction","marginDirection","children","split","wrap","_React$useContext","React","SpaceContext","horizontalSize","verticalSize","latestIndex","supportFlexGap","_extends","_defineProperty","paddingBottom","concat","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","spaceSize","small","middle","large","props","_classNames","ConfigContext","getPrefixCls","space","directionConfig","_props$size","size","align","_props$direction","customizePrefixCls","prefixCls","_props$wrap","otherProps","useFlexGapSupport","_React$useMemo","Array","isArray","getNumberSize","_React$useMemo2","_slicedToArray","childNodes","toArray","keepEmpty","mergedAlign","cn","classNames","itemClassName","nodes","child","key","spaceContext","gapStyle","flexWrap","columnGap","rowGap","Provider"],"sourceRoot":""}